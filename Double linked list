#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct Node {
    char name[100];
    struct Node* prev;
    struct Node* next;
} Node;

typedef struct {
    Node* head;
} DoublyLinkedList;

DoublyLinkedList* create_list() {
    DoublyLinkedList* list = (DoublyLinkedList*)malloc(sizeof(DoublyLinkedList));
    list->head = NULL;
    return list;
}

void insert_end(DoublyLinkedList* list, char* name) {
    Node* new_node = (Node*)malloc(sizeof(Node));
    strcpy(new_node->name, name);
    new_node->next = NULL;
    if (!list->head) {
        new_node->prev = NULL;
        list->head = new_node;
    } else {
        Node* last = list->head;
        while (last->next) last = last->next;
        last->next = new_node;
        new_node->prev = last;
    }
}

void insert_at_position(DoublyLinkedList* list, char* name, int position) {
    Node* new_node = (Node*)malloc(sizeof(Node));
    strcpy(new_node->name, name);
    if (position == 0) {
        new_node->next = list->head;
        new_node->prev = NULL;
        if (list->head) list->head->prev = new_node;
        list->head = new_node;
    } else {
        Node* current = list->head;
        for (int i = 0; i < position - 1 && current; i++) current = current->next;
        if (current) {
            new_node->next = current->next;
            new_node->prev = current;
            if (current->next) current->next->prev = new_node;
            current->next = new_node;
        } else free(new_node);
    }
}

void delete_by_position(DoublyLinkedList* list, int position) {
    if (!list->head) return;
    Node* current = list->head;
    if (position == 0) {
        list->head = current->next;
        if (list->head) list->head->prev = NULL;
        free(current);
        return;
    }
    for (int i = 0; i < position && current; i++) current = current->next;
    if (current) {
        if (current->prev) current->prev->next = current->next;
        if (current->next) current->next->prev = current->prev;
        free(current);
    }
}

void delete_by_name(DoublyLinkedList* list, char* name) {
    Node* current = list->head;
    while (current) {
        if (strcmp(current->name, name) == 0) {
            if (current->prev) current->prev->next = current->next;
            else list->head = current->next;
            if (current->next) current->next->prev = current->prev;
            free(current);
            return;
        }
        current = current->next;
    }
    printf("Contact '%s' not found.\n", name);
}

void display(DoublyLinkedList* list) {
    Node* current = list->head;
    while (current) {
        printf("%s <-> ", current->name);
        current = current->next;
    }
    printf("NULL\n");
}

int search_contact(DoublyLinkedList* list, char* name) {
    Node* current = list->head;
    int position = 0;
    while (current) {
        if (strcmp(current->name, name) == 0) return position;
        current = current->next;
        position++;
    }
    return -1;
}

int main() {
    DoublyLinkedList* list = create_list();
    int choice, position;
    char name[100];

    while (1) {
        printf("\n1. Create list\n2. Insert contact\n3. Delete contact\n4. Display list\n5. Search contact\n6. Exit\n");
        printf("Enter choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter number of contacts: ");
                int n;
                scanf("%d", &n);
                for (int i = 0; i < n; i++) {
                    printf("Enter contact name %d: ", i + 1);
                    scanf("%s", name);
                    insert_end(list, name);
                }
                break;

            case 2:
                printf("Enter contact name: ");
                scanf("%s", name);
                printf("Enter position (0-based index): ");
                scanf("%d", &position);
                insert_at_position(list, name, position);
                break;

            case 3:
                printf("Delete by name or position? (n/p): ");
                char opt;
                scanf(" %c", &opt);
                if (opt == 'n') {
                    printf("Enter name to delete: ");
                    scanf("%s", name);
                    delete_by_name(list, name);
                } else {
                    printf("Enter position: ");
                    scanf("%d", &position);
                    delete_by_position(list, position);
                }
                break;

            case 4:
                display(list);
                break;

            case 5:
                printf("Enter name to search: ");
                scanf("%s", name);
                position = search_contact(list, name);
                if (position != -1)
                    printf("%s found at position %d\n", name, position);
                else
                    printf("%s not found.\n", name);
                break;

            case 6:
                printf("Exiting...\n");
                return 0;

            default:
                printf("Invalid choice!\n");
        }
    }
}
